<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" backgroundColor="#FFFFFF" 
		width="100%" 
		horizontalScrollPolicy="off" 
		verticalScrollPolicy="off"
		y="0" 
		autoLayout="false" xmlns:mx1="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"
		>
<mx:Script>
	<![CDATA[
		import com.telecoms.media.charts.control.events.charts.LoadAppYearEvent;
		import com.telecoms.media.charts.control.events.charts.LoadServiceYearEvent;
		import com.telecoms.media.charts.model.ChartsModelLocator;
		
		import mx.charts.CategoryAxis;
		import mx.charts.ColumnChart;
		import mx.charts.Legend;
		import mx.charts.PieChart;
		import mx.charts.chartClasses.Series;
		import mx.charts.events.ChartItemEvent;
		import mx.charts.series.ColumnSeries;
		import mx.charts.series.ColumnSet;
		import mx.charts.series.PieSeries;
		import mx.collections.ArrayCollection;
		import mx.effects.Tween;
		import mx.events.ListEvent;
		
		[Bindable]
		public var model:ChartsModelLocator = ChartsModelLocator.getInstance();
		private var tween:Tween;
		private var itemIndex:int = 0;
		private var totalImages:int = -3;
		public var serviceArray:Array = new Array;
		public var serviceColumn:ColumnSeries = new ColumnSeries;
		public var stackedColumnChart:ColumnChart;
		public var isoPieChart:PieChart;
		public var newSeries:Array;
		[Bindable]
		public var seriesDetails:ArrayCollection = new ArrayCollection;
		
		private var chart:PieChart;
		private var series:PieSeries;
		
		[Bindable]
		private var medalsAC:ArrayCollection = new ArrayCollection( [
			{ Country: "USA", Gold: 35, Silver:39, Bronze: 29 },
			{ Country: "China", Gold: 32, Silver:17, Bronze: 14 },
			{ Country: "Russia", Gold: 27, Silver:27, Bronze: 38 } 
		]);
		
		private function refactored():void
		{
			var item:Object = { Country: "Eire", Gold: 55, Silver:39, Bronze: 9 };
			medalsAC.addItem(item);
		}
		
		private function displayGold(data:Object, field:String, index:Number, percentValue:Number):String {
			var temp:String= (" " + percentValue).substr(0,6);
			return data.app + ": " + '\n' + "Total Gold: " + data.year + '\n' + temp + "%";
		}
		
		// Load Image data
		public function loadXML():void
		{
			var appEvent:LoadAppYearEvent=null;
			appEvent=new LoadAppYearEvent();
			appEvent.dispatch();
			
			var serviceEvent:LoadServiceYearEvent=null;
			serviceEvent=new LoadServiceYearEvent();
			serviceEvent.dispatch();
			
			refactored();
		}
		private function serviceSlice():void
		{
			
			serviceColumn.xField = model.appYearData.Year.@date;
			for(var i:int = 0; i < 6; i++){
			serviceColumn = new ColumnSeries;
			serviceColumn.yField = model.appYearData.Year[i].Communication;
			trace(serviceColumn.yField);
			serviceColumn.displayName = 'Communication';
			serviceArray.push(serviceColumn);
			}
			//ColumnChart.series = serviceArray;
			trace(serviceArray);
		}
		
		private function stateSelect():void
		{
			if(model.dataState){
				panelActionscript.removeChildAt(1);
				model.dataState = false;
				createColChart();
			}
			else{
				panelActionscript.removeChildAt(1);
				panelActionscript.addChildAt(ColumnChart1, 1);
				model.dataState = true;
				legend1.dataProvider = ColumnChart1;
			}
		}
		
		private function dataSelection():void
		{
			if(Service.selected){
				trace('Service Select!');
				// if Service button selected then create data using this
				seriesDetails = new ArrayCollection([
					{YField:"Communication", DisplayName:"Communication"},
					{YField:"Entertainment", DisplayName:"Entertainment"},
					{YField:"VideoTV", DisplayName:"Video/TV"},
					{YField:"Information", DisplayName:"Information"},
					{YField:"MobileBrowsing", DisplayName:"Mobile Browsing"},
					{YField:"Portable", DisplayName:"Portable"}
				]);
				model.convertedServiceXML = seriesDetails;
			}
			else if(Region.selected){
				trace('Region selected!');
				// if Region button selected then create data using this
				seriesDetails = new ArrayCollection([
					{YField:"NorthAmerica", DisplayName:"North America"},
					{YField:"LatinAmerica", DisplayName:"Latin America"},
					{YField:"Asia-Pacific", DisplayName:"Asia-Pacific"},
					{YField:"Europe", DisplayName:"Europe"},
					{YField:"Africa-MiddleEast", DisplayName:"Africa/MiddleEast"}
				]);
				model.convertedXML = seriesDetails;
			}
		}
		
		private function createColChart():void
		{
			// Create a column chart object
			stackedColumnChart = new ColumnChart();
			stackedColumnChart.dataProvider = model.convertedServiceXML;
			stackedColumnChart.showDataTips = true;
			stackedColumnChart.height   = 250;
			stackedColumnChart.percentWidth = 100;
			
			// Set the horizontal axix category
			var xAxis:CategoryAxis = new CategoryAxis();
			xAxis.categoryField = "date";
			stackedColumnChart.horizontalAxis = xAxis;
			
			// ColumnSet.series is an array which contains
			// an array of ColumnSeries objects.
			var columnSet:ColumnSet = new ColumnSet();
			columnSet.type = "stacked";
			
			// Build Data Array
			dataSelection();
			
			// Create a ColumnSeries, and an array to be
			// populated with dynamically generated columnSeries objects
			var columnSeries:ColumnSeries;
			var seriesArray:Array = new Array();
			
			// Generate an array of ColumnSeries objects
			// which are then be applied to the ColumnSet series.
			for(var i:int = 0; i < seriesDetails.length; i++){
				columnSeries = new ColumnSeries();
				columnSeries.yField = seriesDetails[i].YField;
				columnSeries.displayName = seriesDetails[i].DisplayName;
				seriesArray.push(columnSeries);
			}
			stackedColumnChart.addEventListener(ChartItemEvent.ITEM_CLICK, drillDown);
			columnSet.series = seriesArray;
			
			
			// c.series could take an array of column sets
			// for displaying mixed charts i.e. c.series = [columnSet1, columnSet2];
			stackedColumnChart.series = [columnSet];
			
			legend1.dataProvider = stackedColumnChart;
			panelActionscript.addChildAt(stackedColumnChart, 1);
		}
		
		// Result of clicking on column segment
		private function drillDown(e:ChartItemEvent):void
		{
			model.explodingArray = [0,0,0,0,0,0];

			if(model.dataState){
				panelActionscript.removeChildAt(1);
				createPieChart(e);
			}
			else{
				panelActionscript.removeChildAt(1);
				createPieChart(e);
			}
		}
		// Exploding wedges using array data as radius amount
		private function explodeSlice(e:ChartItemEvent):void
			{
				model.explodingArray = [0,0,0,0,0,0];
				model.explodingArray[e.hitData.chartItem.index]=0.1;
				chart.series[0].perWedgeExplodeRadius = model.explodingArray;
			}
		
		private function createPieChart(e:ChartItemEvent):void
		{
			/* Define pie chart. */
			chart = new PieChart();
			chart.percentWidth = 100;
			chart.height = 250;
			chart.showDataTips = true;

			dataSelection();
			chart.dataProvider = medalsAC;
			
			/* Define pie series. */
			series = new PieSeries();
			series.nameField = "Country";
			trace(series.nameField);
			
			//Below should be seriesDetail YField!
			
			series.field = "Gold";
			trace(series.field);
			
			series.perWedgeExplodeRadius = model.explodingArray;
			series.setStyle("showDataEffect", interpolate);
			
			/* Remove default dropshadow filter. */
			series.filters = [];
			
			chart.series = [series];
			
			/* Update Legend */
			legend1.dataProvider = chart;
			
			/* Add chart to the display list. */
			chart.addEventListener(ChartItemEvent.ITEM_CLICK, explodeSlice);
			panelActionscript.addChildAt(chart, 1);
		}

		private function removeColItem(legendItem:int):void
		{
			//trace(legendItem);
			model.convertedXML[3].NorthAmerica = 0;
			ColumnChart1.dataProvider = model.convertedXML;
			cs1.alpha = 0;
		}
		
		// Define the event handler.
		public function hitDataListener(e:ChartItemEvent):void {
			trace(e.hitData.item.date);
			trace(e.hitData.x + "/" + e.hitData.y);
		}
	]]>
</mx:Script>	
	
	<!-- Define custom colors for use as fills in the AreaChart control. -->
	<mx:SolidColor id="sc1" color="blue" alpha=".3"/>
	<mx:SolidColor id="sc2" color="red" alpha=".3"/>
	<mx:SolidColor id="sc3" color="green" alpha=".3"/>
	<mx:SolidColor id="sc4" color="black" alpha=".3"/>
	<mx:SolidColor id="sc5" color="yellow" alpha=".3"/>
	
	<!-- Define custom Strokes. -->
	<mx:Stroke id = "s1" color="blue" weight="2"/>
	<mx:Stroke id = "s2" color="red" weight="2"/>
	<mx:Stroke id = "s3" color="green" weight="2"/>
	<mx:Stroke id = "s4" color="black" weight="2"/>
	<mx:Stroke id = "s5" color="yellow" weight="2"/>
	
	<mx:SeriesInterpolate id="interpolate" duration="1000"/>
	
<mx:VBox>
	<mx:Panel width="600" title="Mobile Internet Traffic" id="panelActionscript"  horizontalAlign="center">
		<mx:Legend id="legend1" dataProvider="{ColumnChart1}" width="100%" height="30" paddingLeft="30" horizontalGap="6"/>
		
		<mx:ColumnChart id="ColumnChart1" height="250" width="100%"
					  paddingLeft="5" paddingRight="5" type="stacked" 
					  showDataTips="true" dataProvider="{model.convertedXML}" itemClick="{drillDown(event)}">
			<mx:horizontalAxis>
				<mx:CategoryAxis categoryField="date" displayName="date"/>
			</mx:horizontalAxis>
			
			<mx:series>
				<mx:ColumnSeries id="cs1" yField="NorthAmerica" displayName="North America" />
				<mx:ColumnSeries id="cs2" yField="LatinAmerica" displayName="Latin America" />
				<mx:ColumnSeries id="cs3" yField="Asia-Pacific" displayName="Asia-Pacific" />
				<mx:ColumnSeries id="cs4" yField="Europe" displayName="Europe" />
				<mx:ColumnSeries id="cs5" yField="Africa-MiddleEast" displayName="Africa/Middle-East" />
			</mx:series>
		</mx:ColumnChart>

		<mx:HBox paddingLeft="460" paddingBottom="4">
			<s:RadioButton id="Region" label="Region" click="stateSelect();" selected="true"/>
			<s:RadioButton id="Service" label="Service" click="stateSelect();"/>
		</mx:HBox>
	</mx:Panel>

</mx:VBox>

</mx:Canvas>
