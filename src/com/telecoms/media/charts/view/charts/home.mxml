<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" backgroundColor="#FFFFFF" 
		width="100%" 
		horizontalScrollPolicy="off" 
		verticalScrollPolicy="off"
		y="0" 
		autoLayout="false" xmlns:mx1="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:charts="com.telecoms.media.charts.view.charts.*"
		>
<mx:Script>
	<![CDATA[
		import com.telecoms.media.charts.control.events.charts.CheckBoxLegendItemChangedEvent;
		import com.telecoms.media.charts.control.events.charts.LoadAppYearEvent;
		import com.telecoms.media.charts.control.events.charts.LoadServiceYearEvent;
		import com.telecoms.media.charts.model.ChartsModelLocator;
		
		import mx.charts.CategoryAxis;
		import mx.charts.ColumnChart;
		import mx.charts.Legend;
		import mx.charts.PieChart;
		import mx.charts.chartClasses.Series;
		import mx.charts.events.ChartItemEvent;
		import mx.charts.series.ColumnSeries;
		import mx.charts.series.ColumnSet;
		import mx.charts.series.PieSeries;
		import mx.collections.ArrayCollection;
		import mx.controls.CheckBox;
		import mx.effects.Tween;
		import mx.events.ListEvent;
		
		[Bindable]
		public var model:ChartsModelLocator = ChartsModelLocator.getInstance();
		public var serviceArray:Array = new Array;
		public var serviceColumn:ColumnSeries = new ColumnSeries;
		[Bindable]
		public var seriesDetails:ArrayCollection = new ArrayCollection;
		private var series:PieSeries;
		private	var c:int = 0;

		// Load Image data
		public function loadXML():void
		{
			var appEvent:LoadAppYearEvent=null;
			appEvent=new LoadAppYearEvent();
			appEvent.dispatch();
			
			var serviceEvent:LoadServiceYearEvent=null;
			serviceEvent=new LoadServiceYearEvent();
			serviceEvent.dispatch();
		}
	
		private function stateSelect():void
		{
			if(model.dataState){
				panelActionscript.removeChildAt(1);
				model.dataState = false;
				createColChart();
			}
			else{
				panelActionscript.removeChildAt(1);
				panelActionscript.addChildAt(ColumnChart1, 1);
				model.dataState = true;
				legend1.dataProvider = ColumnChart1;
			}
		}
		private function createColChart():void
		{
			// Create a column chart object
			model.stackedColumnChart = new ColumnChart();
			model.stackedColumnChart.dataProvider = model.convertedServiceXML;
			model.stackedColumnChart.showDataTips = true;
			model.stackedColumnChart.height   = 250;
			model.stackedColumnChart.percentWidth = 100;
			
			// Set the horizontal axix category
			var xAxis:CategoryAxis = new CategoryAxis();
			xAxis.categoryField = "date";
			model.stackedColumnChart.horizontalAxis = xAxis;
			
			// ColumnSet.series is an array which contains
			// an array of ColumnSeries objects.
			var columnSet:ColumnSet = new ColumnSet();
			columnSet.type = "stacked";
			
			// Build Data Array
			seriesDetails = new ArrayCollection([
				{YField:"Communication", DisplayName:"Communication"},
				{YField:"Entertainment", DisplayName:"Entertainment"},
				{YField:"VideoTV", DisplayName:"Video/TV"},
				{YField:"Information", DisplayName:"Information"},
				{YField:"MobileBrowsing", DisplayName:"Mobile Browsing"},
				{YField:"Portable", DisplayName:"Portable"}
			]);
			
			// Create a ColumnSeries, and an array to be
			// populated with dynamically generated columnSeries objects
			var columnSeries:ColumnSeries;
			var seriesArray:Array = new Array();
			
			// Generate an array of ColumnSeries objects
			// which are then be applied to the ColumnSet series.
			for(var i:int = 0; i < seriesDetails.length; i++){
				columnSeries = new ColumnSeries();
				columnSeries.yField = seriesDetails[i].YField;
				columnSeries.displayName = seriesDetails[i].DisplayName;
				columnSeries.setStyle("showDataEffect", slideIn);
				columnSeries.setStyle("hideDataEffect", slideOut);
				seriesArray.push(columnSeries);
			}
			model.stackedColumnChart.addEventListener(ChartItemEvent.ITEM_CLICK, drillDown);
			columnSet.series = seriesArray;
			
			// c.series could take an array of column sets
			// for displaying mixed charts i.e. c.series = [columnSet1, columnSet2];
			model.stackedColumnChart.series = [columnSet];
			
			legend1.dataProvider = model.stackedColumnChart;
			panelActionscript.addChildAt(model.stackedColumnChart, 1);
		}
		
		// Result of clicking on column segment
		private function drillDown(e:ChartItemEvent):void
		{
			model.explodingArray = [0,0,0,0,0,0];
			panelActionscript.removeChildAt(1);
			createPieChart(e);
		}
		
		// Exploding wedges using array data as radius amount
		private function explodeSlice(e:ChartItemEvent):void
		{
				model.explodingArray = [0,0,0,0,0,0];
				model.explodingArray[e.hitData.chartItem.index]=0.1;
				model.chart.series[0].perWedgeExplodeRadius = model.explodingArray;
		}
		
		private function createPieChart(e:ChartItemEvent):void
		{
			pieRefactoring(e);
			
			/* Define pie chart. */
			model.chart = new PieChart();
			model.chart.percentWidth = 100;
			model.chart.height = 250;
			model.chart.showDataTips = true;

			model.chart.dataProvider = model.refactoredPieData;
			
			/* Define pie series. */
			series = new PieSeries();
			series.nameField = "Country";			
			series.field = "Traffic";
			
			series.perWedgeExplodeRadius = model.explodingArray;
			series.setStyle("showDataEffect", interpolate);
			
			/* Remove default dropshadow filter. */
			series.filters = [];
			
			model.chart.series = [series];
			
			/* Update Legend */
			legend1.dataProvider = model.chart;
			
			// Add onClick event to wedges
			model.chart.addEventListener(ChartItemEvent.ITEM_CLICK, explodeSlice);
						
			/* Add chart and buttons to the display list. */
			panelActionscript.addChildAt(model.chart, 1);
		}

		private function removeColItem(legendItem:int):void
		{
			//trace(legendItem);
			model.convertedXML[3].NorthAmerica = 0;
			ColumnChart1.dataProvider = model.convertedXML;
			cs1.alpha = 0;
		}
		private function pieRefactoring(e:ChartItemEvent):void
		{
			if(model.dataState){
				pieRegionRefactoring(e);
			}
			else{
				pieServiceRefactoring(e);
			}
		}
		private function pieServiceRefactoring(e:ChartItemEvent):void
		{
			var yearValue:int = e.hitData.item.date;
			var dataLength:int = model.serviceYearData.Year.(@date == yearValue).children().length();
			model.refactoredPieData.removeAll();
			
			for(var i:int = 0; i < dataLength ; i++){
				var item:Object = { Year: yearValue, Country: model.serviceYearData.Year.(@date == yearValue).child(i).name(), Traffic: model.serviceYearData.Year.(@date == yearValue).child(i)};
				model.refactoredPieData.addItem(item);
			}
		}
		private function pieRegionRefactoring(e:ChartItemEvent):void
		{
			var yearValue:int = e.hitData.item.date;
			var dataLength:int = model.appYearData.Year.(@date == yearValue).children().length();
			model.refactoredPieData.removeAll();
			
			for(var i:int = 0; i < dataLength ; i++){
				var item:Object = { Year: yearValue, Country: model.appYearData.Year.(@date == yearValue).child(i).name(), Traffic: model.appYearData.Year.(@date == yearValue).child(i)};
				model.refactoredPieData.addItem(item);
			}
		}
		private function removeData():void
		{
			if(model.dataState){
				model.convertedXML.removeItemAt(2);
			}
			else {
				model.convertedServiceXML.removeItemAt(2);
				model.stackedColumnChart.dataProvider = model.convertedServiceXML;
			}
		}
		private function legendItemChanged(event:CheckBoxLegendItemChangedEvent):void {
			var txt:String = "legendItemChanged: " + event.legendItem.label +
				" [" + (event.legendItemSelected ? "selected]" : "not selected]");
			var refactorString:String = stripSpaces(event.legendItem.label);
			model.tempCheckBoxData = stripHyphen(stripSlashes(refactorString));
		}
		private function stripSpaces(originalString:String):String
		{
			var original:Array = originalString.split(" ");
			return (original.join(""));
		}
		private function stripSlashes(originalString:String):String
		{
			var original:Array = originalString.split("/");
			return (original.join(""));
		}
		private function stripHyphen(originalString:String):String
		{
			var original:Array = originalString.split("-");
			return (original.join(""));
		}

	]]>
</mx:Script>	
	
	<!-- Define custom colors for use as fills in the AreaChart control. -->
	<mx:SolidColor id="sc1" color="blue" alpha=".3"/>
	<mx:SolidColor id="sc2" color="red" alpha=".3"/>
	<mx:SolidColor id="sc3" color="green" alpha=".3"/>
	<mx:SolidColor id="sc4" color="black" alpha=".3"/>
	<mx:SolidColor id="sc5" color="yellow" alpha=".3"/>
	
	<!-- Define custom Strokes. -->
	<mx:Stroke id = "s1" color="blue" weight="2"/>
	<mx:Stroke id = "s2" color="red" weight="2"/>
	<mx:Stroke id = "s3" color="green" weight="2"/>
	<mx:Stroke id = "s4" color="black" weight="2"/>
	<mx:Stroke id = "s5" color="yellow" weight="2"/>
	
	<mx:SeriesSlide id="slideIn" duration="1000" direction="up"/>
	<mx:SeriesSlide id="slideOut" duration="1000" direction="down"/>
	
	<mx:SeriesInterpolate id="interpolate" duration="1000"/>

<mx:VBox>
	<mx:Panel width="600" title="Mobile Internet Traffic" id="panelActionscript"  horizontalAlign="center">
		<charts:CheckBoxLegend id="legend1" dataProvider="{ColumnChart1}" width="100%" height="30" 
							   paddingLeft="30" horizontalGap="6" change="legendItemChanged(event)" />

		<mx:ColumnChart id="ColumnChart1" height="250" width="100%"
					  paddingLeft="5" paddingRight="5" type="stacked"
					  showDataTips="true" dataProvider="{model.convertedXML}" itemClick="{drillDown(event)}" >
			<mx:horizontalAxis>
				<mx:CategoryAxis categoryField="date" displayName="date"/>
			</mx:horizontalAxis>
			
			<mx:series>
				<mx:ColumnSeries id="cs1" yField="NorthAmerica" displayName="North America" showDataEffect="slideIn" hideDataEffect="slideOut"/>
				<mx:ColumnSeries id="cs2" yField="LatinAmerica" displayName="Latin America" showDataEffect="slideIn" hideDataEffect="slideOut" />
				<mx:ColumnSeries id="cs3" yField="AsiaPacific" displayName="Asia-Pacific" showDataEffect="slideIn" hideDataEffect="slideOut" />
				<mx:ColumnSeries id="cs4" yField="Europe" displayName="Europe" showDataEffect="slideIn" hideDataEffect="slideOut" />
				<mx:ColumnSeries id="cs5" yField="AfricaMiddleEast" displayName="Africa/Middle-East" showDataEffect="slideIn" hideDataEffect="slideOut" />
			</mx:series>
		</mx:ColumnChart>

		<mx:HBox paddingLeft="335" paddingBottom="4">
			<s:Button id="TakeAway" label="Take Away" click="removeData();" />
			<s:Button id="Region" label="Region" click="{model.dataState=false;}stateSelect();"  />
			<s:Button id="Service" label="Service" click="{model.dataState=true;}stateSelect();" />
		</mx:HBox>
	</mx:Panel>

</mx:VBox>

</mx:Canvas>
